#!/usr/bin/env bash
set -euo pipefail

MARK_BEGIN="# BEGIN AUTOGENERATED BINS"
MARK_END="# END AUTOGENERATED BINS"
BACON_FILE="bacon.toml"
BINS_DIR="src/bin"

usage() {
  cat <<EOF
Generate Bacon jobs for every Rust file in $BINS_DIR.
Usage:
  $0            # write/refresh the block in bacon.toml
  $0 --print    # print the TOML block to stdout (no file changes)
EOF
}

print_block() {
  echo "$MARK_BEGIN"
  echo "# Regenerate with script. Do not edit inside this block."
  echo

  # Add all bins found in src/bin/*.rs
  while IFS= read -r -d '' f; do
    name="$(basename "${f%.*}")"
    cat <<TOML
[jobs."run_bin-$name"]
command = ["cargo", "run", "--bin", "$name"]
need_stdout = true
allow_warnings = true
background = false
on_change_strategy = "kill_then_restart"

TOML
  done < <(find "$BINS_DIR" -maxdepth 1 -type f -name '*.rs' -print0 | sort -z)
  echo "$MARK_END"
}

main() {
  [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]] && { usage; exit 0; }
  [[ ! -d "$BINS_DIR" ]] && { echo "No $BINS_DIR directory found."; exit 1; }

  if [[ "${1:-}" == "--print" ]]; then
    print_block
    exit 0
  fi

  # Ensure bacon.toml exists (keep your custom stuff above/below the markers)
  [[ -f "$BACON_FILE" ]] || : > "$BACON_FILE"

  # Strip previous autogenerated block (if any)
  tmp="$(mktemp)"
  awk -v begin="$MARK_BEGIN" -v end="$MARK_END" '
    BEGIN{inside=0}
    index($0, begin){inside=1; next}
    index($0, end){inside=0; next}
    !inside{print}
  ' "$BACON_FILE" > "$tmp"

  # Append fresh block
  {
    cat "$tmp"
    echo
    print_block
  } > "$BACON_FILE"

  rm -f "$tmp"
  echo "Updated $BACON_FILE with jobs for bins in $BINS_DIR."
}

main "$@"